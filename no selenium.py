import os
import re
import json
import time
import asyncio
import requests
from datetime import datetime
from urllib.parse import urlparse
from telethon import TelegramClient, events
from telethon.errors import SessionPasswordNeededError
from telethon.tl.types import MessageMediaPhoto, MessageMediaDocument

# === AYARLAR ===
ANNOUNCE_CHANNEL = "https://t.me/ustaslot"
POSTED_LOG_FILE = "posted_log.json"

# === GÄ°RÄ°Åž BÄ°LGÄ°LERÄ° ===
if not os.path.exists("config.txt"):
    print("HATA: config.txt dosyasÄ± eksik!")
    input("Kapatmak iÃ§in Enter tuÅŸuna bas...")
    exit()

try:
    with open("config.txt", "r") as f:
        api_id, api_hash, phone = f.read().strip().split(',')
except:
    print("HATA: config.txt iÃ§eriÄŸi hatalÄ±. Format: 123456,api_hash,+905xxxxxxxxx")
    input("Kapatmak iÃ§in Enter tuÅŸuna bas...")
    exit()

session = phone.replace('+', '').replace(' ', '')
client = TelegramClient(session, int(api_id), api_hash)

# === KAYITLAR ===
posted_keys = set()
lock = asyncio.Lock()

if os.path.exists(POSTED_LOG_FILE):
    with open(POSTED_LOG_FILE, "r", encoding="utf-8") as f:
        try:
            log_data = json.load(f)
            for entry in log_data:
                posted_keys.add(entry["key"])
        except json.JSONDecodeError:
            log_data = []
else:
    log_data = []

# === MESAJ FORMATLAYICI ===
def format_message(link, code):
    return (
        f"\U0001F9FE Kod: <code>{code}</code>\n"
        f"\U0001F517 Link: {link}\n\n"
        f"\U0001F451 <a href='https://t.me/ustaslot'>Usta Slot & Kod Kanal</a>\n"
        f"\U0001F48D <a href='https://t.me/sikayetimvar2'>Åžikayetim Var</a>\n"
        f"\U0001F3F9 <a href='https://t.me/OKCASINOO'>Slot Ve Nakit Ã–dÃ¼l</a>\n"
        f"\U0001F3E6 <a href='https://heylink.me/CAS%C4%B0NOOK/'>GÃ¼venilir Siteler</a>"
    )

# === GEÃ‡ERLÄ° MESAJ KONTROLÃœ ===
def is_valid_message(text, message):
    link_match = re.search(r'https?://[^\s]+', text)
    lines = text.strip().split('\n')
    code_candidate = next((line.strip() for line in lines if re.fullmatch(r'[A-Za-z0-9\-]{4,20}', line.strip())), None)
    has_media = isinstance(message.media, (MessageMediaPhoto, MessageMediaDocument))
    return link_match and code_candidate and not has_media

# === MESAJ Ä°ÅžLEYÄ°CÄ° ===
async def process_message(text):
    lines = text.strip().split('\n')
    code = next((line.strip() for line in lines if re.fullmatch(r'[A-Za-z0-9\-]{4,20}', line.strip())), None)
    link = next((l.strip() for l in lines if 'http' in l), None)
    if not code or not link:
        return

    key = f"{code.lower()}|{link.lower()}"

    async with lock:
        if key in posted_keys:
            print(f"[!] Daha Ã¶nce paylaÅŸÄ±ldÄ±: {key}")
            return

        sent = await client.send_message(ANNOUNCE_CHANNEL, text)
        print(f"[â†’] PaylaÅŸÄ±ldÄ±: {key}")

        posted_keys.add(key)
        log_data.append({
            "key": key,
            "timestamp": datetime.now().isoformat(),
            "raw_message": text,
            "message_id": sent.id,
            "channel_id": sent.peer_id.channel_id
        })

        with open(POSTED_LOG_FILE, "w", encoding="utf-8") as f:
            json.dump(log_data, f, ensure_ascii=False, indent=2)

    try:
        await asyncio.sleep(1)
        formatted = format_message(link, code)
        await sent.edit(formatted, parse_mode='html', link_preview=False)
        print(f"[âœ“] FormatlÄ± ÅŸekilde gÃ¼ncellendi.")
    except Exception as e:
        print(f"[X] GÃ¼ncelleme hatasÄ±: {e}")

# === YENÄ° MESAJ DÄ°NLER ===
@client.on(events.NewMessage)
async def handler_new(event):
    if is_valid_message(event.raw_text, event.message):
        await process_message(event.raw_text)

# === ANA FONKSÄ°YON ===
async def main():
    try:
        await client.start(phone)
    except SessionPasswordNeededError:
        password = input("Telegram ÅŸifreniz (2FA): ")
        await client.sign_in(password=password)

    print(f"[âœ“] GiriÅŸ yapÄ±ldÄ±: {phone}")

    if not os.path.exists("groups.txt"):
        print("HATA: groups.txt bulunamadÄ±!")
        input("Enter ile kapat...")
        exit()

    with open("groups.txt", "r") as f:
        groups = [line.strip() for line in f if line.strip()]

    for group in groups:
        try:
            await client.get_entity(group)
            print(f"[+] Dinleniyor: {group}")
        except Exception as e:
            print(f"[!] Grup alÄ±namadÄ±: {group} â†’ {e}")

    print("ðŸŸ¢ Bot aktif. Mesajlar dinleniyor...")
    await client.run_until_disconnected()

# === BAÅžLAT ===
asyncio.run(main())
